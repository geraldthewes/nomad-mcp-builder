# Test Build Configuration with Vault Secrets
# This example demonstrates how to use Vault secrets in test containers

owner: test-team
repo_url: https://github.com/geraldthewes/docker-build-hello-world
git_ref: main
dockerfile_path: Dockerfile
image_name: hello-world-vault-test
image_tags:
  - vault-test
registry_url: registry.cluster:5000

# Test configuration with Vault secrets
test:
  entry_point: true

  # Regular environment variables (not secret)
  env:
    NODE_ENV: "test"
    DEBUG_LEVEL: "info"

  # Vault policies required for secret access
  # These policies must exist in Vault and grant read access to the secret paths below
  vault_policies:
    - test-secrets-policy

  # Vault secrets to inject as environment variables
  #
  # SYNTAX EXPLANATION:
  # fields:
  #   <vault_field_name>: "<CONTAINER_ENV_VAR_NAME>"
  #   ^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^
  #   LEFT = Field name      RIGHT = Environment variable
  #          stored IN              SET in Docker container
  #          Vault
  #
  # Example: If Vault has a field "api_token" with value "secret123"
  #          and you map it to "MY_API_TOKEN"
  #          then the container will receive: MY_API_TOKEN=secret123
  vault_secrets:
    # Example 1: AWS credentials
    # In Vault: vault kv put secret/test/aws access_id="AKIA..." secret_key="wJa..."
    - path: "secret/data/test/aws"
      fields:
        access_id: "AWS_ACCESS_KEY_ID"        # Vault field "access_id" → env var AWS_ACCESS_KEY_ID
        secret_key: "AWS_SECRET_ACCESS_KEY"   # Vault field "secret_key" → env var AWS_SECRET_ACCESS_KEY

    # Example 2: API tokens
    # In Vault: vault kv put secret/test/api-keys openai="sk-..." anthropic="sk-ant-..."
    - path: "secret/data/test/api-keys"
      fields:
        openai: "OPENAI_API_KEY"              # Vault field "openai" → env var OPENAI_API_KEY
        anthropic: "ANTHROPIC_API_KEY"        # Vault field "anthropic" → env var ANTHROPIC_API_KEY

    # Example 3: Database credentials
    # In Vault: vault kv put secret/test/database db_user="testuser" db_pass="testpass"
    - path: "secret/data/test/database"
      fields:
        db_user: "DATABASE_USERNAME"          # Vault field "db_user" → env var DATABASE_USERNAME
        db_pass: "DATABASE_PASSWORD"          # Vault field "db_pass" → env var DATABASE_PASSWORD

# Optional: Resource limits
resource_limits:
  test:
    cpu: "1000"
    memory: "2048"
    disk: "10240"

# NOTE: Before using this configuration, you must:
# 1. Create the secrets in Vault:
#    vault kv put secret/test/aws access_id="your-key" secret_key="your-secret"
#    vault kv put secret/test/api-keys openai="your-openai-key" anthropic="your-anthropic-key"
#    vault kv put secret/test/database db_user="testuser" db_pass="testpass"
#
# 2. Create a Vault policy file (test-secrets-policy.hcl):
#    path "secret/data/test/aws" {
#      capabilities = ["read"]
#    }
#    path "secret/data/test/api-keys" {
#      capabilities = ["read"]
#    }
#    path "secret/data/test/database" {
#      capabilities = ["read"]
#    }
#
# 3. Apply the policy:
#    vault policy write test-secrets-policy test-secrets-policy.hcl
